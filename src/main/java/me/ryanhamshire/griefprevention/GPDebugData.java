/*
 * This file is part of GriefPrevention, licensed under the MIT License (MIT).
 *
 * Copyright (c) bloodmc
 * Copyright (c) contributors
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */
package me.ryanhamshire.griefprevention;

import org.eclipse.egit.github.core.Gist;
import org.eclipse.egit.github.core.GistFile;
import org.eclipse.egit.github.core.service.GistService;
import org.spongepowered.api.command.CommandSource;
import org.spongepowered.api.entity.living.player.User;
import org.spongepowered.api.text.Text;
import org.spongepowered.api.text.action.TextActions;
import org.spongepowered.api.text.format.TextColors;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.net.HttpURLConnection;
import java.net.MalformedURLException;
import java.net.URL;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Date;
import java.util.List;

public class GPDebugData {

    private static final int MAX_LINES = 5000;
    private static final SimpleDateFormat DATE_FORMAT = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss z");
    private static final String TINY_URL_API_CREATE = "http://tinyurl.com/api-create.php?url=";

    private final CommandSource source;
    private final List<String> header;
    private final List<String> records;
    private final long startTime = System.currentTimeMillis();
    private boolean verbose;
    private User target;

    public GPDebugData(CommandSource source, User target, boolean verbose) {
        this.source = source;
        this.target = target;
        this.verbose = verbose;
        this.records = new ArrayList<>();
        this.header = new ArrayList<>();
        this.header.add("#### This file was automatically generated by [GriefPrevention](https://github.com/MinecraftPortCentral/GriefPrevention) ");
        this.header.add("");
        this.header.add("### Metadata");
        this.header.add("| Key | Value |");
        this.header.add("|-----|-------|");
        this.header.add("| GP Version | " + GriefPreventionPlugin.IMPLEMENTATION_VERSION + "|");
        this.header.add("| Sponge Version | " + GriefPreventionPlugin.SPONGE_VERSION + "|");
        this.header.add("| User | " + (this.target == null ? "ALL" : this.target.getName()) + "|");
        this.header.add("| Record start | " + DATE_FORMAT.format(new Date(this.startTime)) + "|");
    }

    public void addRecord(String claim, String event, String source, String target, String location, String user) {
        if (this.records.size() < MAX_LINES) {
            this.records.add("| " + claim + " | " + event + " | " + source + " | " + target + " | " + location + " | " + user + " | ");
        } else {
            this.source.sendMessage(Text.of("MAX DEBUG LIMIT REACHED!", "\n",
                    TextColors.GREEN, "Pasting output..."));
            this.pasteRecords();
            this.records.clear();
        }
    }

    public CommandSource getSource() {
        return this.source;
    }

    public User getTarget() {
        return this.target;
    }

    public boolean isRecording() {
        return !this.verbose;
    }

    public void setTarget(User user) {
        this.target = user;
    }

    public void setVerbose(boolean verbose) {
        this.verbose = verbose;
    }

    public void pasteRecords() {
        if (this.records.isEmpty()) {
            this.source.sendMessage(Text.of(TextColors.RED, "No debug records to paste!"));
            return;
        }

        final long endTime = System.currentTimeMillis();
        List<String> debugOutput = new ArrayList<>(this.header);
        debugOutput.add("| Record end | " + DATE_FORMAT.format(new Date(endTime)) + "|");
        long elapsed = (endTime - startTime) / 1000L; 
        debugOutput.add("| Time elapsed | " + elapsed + " seconds" + "|");
        debugOutput.add("");
        debugOutput.add("### Output") ;
        debugOutput.add("| Claim | Event | Source | Target | Location | User |");
        debugOutput.add("|-------|-------|--------|--------|----------|------|");

        debugOutput.addAll(this.records);

        GistService gistService = new GistService();
        Gist gist = new Gist();
        gist.setPublic(false);
        gist.setDescription("GriefPrevention Debug Log");
        GistFile file = new GistFile();
        file.setContent(String.join("\n", debugOutput));
        String dateFormat = new SimpleDateFormat("yyyyMMddHHmm").format(new Date());
        file.setFilename("gp-" + dateFormat.replace(".", "-") + ".md");
        gist.setFiles(Collections.singletonMap(file.getFilename(), file));

        try {
            gist = gistService.createGist(gist);
        } catch (IOException e) {
            this.source.sendMessage(Text.of(TextColors.RED, "Error uploading content to Gist : ", TextColors.WHITE, e.getMessage()));
            return;
        }

        URL url;
        try {
            url = new URL(gist.getHtmlUrl());
        } catch (MalformedURLException e) {
            this.source.sendMessage(Text.of(TextColors.RED, "Error uploading content to Gist : ", TextColors.WHITE, e.getMessage()));
            return;
        }

        this.source.sendMessage(Text.builder().append(Text.of(TextColors.GREEN, "Paste success! : " + shortenUrl(gist.getHtmlUrl())))
                .onClick(TextActions.openUrl(url)).build());
    }

    private String shortenUrl(String gistUrl) {
        String tinyUrl;
        try {
            final URL url = new URL(TINY_URL_API_CREATE + gistUrl);
            HttpURLConnection conn = (HttpURLConnection) url.openConnection();
            conn.setRequestMethod("GET");
            if (conn.getResponseCode() != 200) {
                GriefPreventionPlugin.instance.getLogger().error("Failed : HTTP error code : " + conn.getResponseCode());
                return gistUrl;
            }
            BufferedReader reader = new BufferedReader(new InputStreamReader(
                (conn.getInputStream())));
            tinyUrl = reader.readLine();
            conn.disconnect();
        } catch (MalformedURLException e) {
            e.printStackTrace();
            return gistUrl;
        } catch (IOException e) {
            e.printStackTrace();
            return gistUrl;
        }
        return tinyUrl;
    }
}
